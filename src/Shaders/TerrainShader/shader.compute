#version 430
#define MAX_MODELS 64

layout (local_size_x = 256) in;

struct VertexData {
    vec3 pos;
    vec3 normal;
};

struct InstanceData {
    vec3 pos;
    float scaling;
};

layout (std430, binding = 0) buffer VertexDataBuffer {
    VertexData data[];
};

layout(std430, binding = 1) buffer InstanceBuffer {
    InstanceData instances[];
};

layout(std430, binding = 2) buffer CellGridBuffer {
    uint grid[];
};

layout(binding = 3) uniform atomic_uint instanceCounters[MAX_MODELS];

uniform vec2 u_chunkOffset;
uniform vec2 u_chunkLocalGridPos;
uniform int u_stepSize;
uniform float u_terrainHeight;
uniform float u_scale;
uniform float u_persistance;
uniform float u_lucunarity;
uniform int u_octaves;
uniform int u_bufferOffset;
uniform int u_count;
uniform int u_modelInstanceOffsets[MAX_MODELS];

uniform int u_gridCellSize;
uniform int u_totalGridCells;

float random(uint seed) {
    seed ^= 2747636419u;
    seed *= 2654435769u;
    seed ^= (seed >> 16);
    seed *= 2654435769u;
    seed ^= (seed >> 16);
    return float(seed & 0x007FFFFFu) / float(0x007FFFFF); // Map to [0, 1]
}

vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289(((x * 34.0) + 1.0) * x);
}


vec4 snoiseAndNormal(vec2 v) {
    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                       -0.577350269189626,  // -1.0 + 2.0 * C.x
                        0.024390243902439); // 1.0 / 41.0
    vec2 i = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);

    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

    i = mod289(i);
    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))
                     + i.x + vec3(0.0, i1.x, 1.0));

    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
    vec3 w = m;
    m = m * m;
    w *= 8.0 * m;
    m = m * m;

    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;

    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);

    vec2 g0 = vec2(a0.x, h.x);
    vec2 g1 = vec2(a0.y, h.y);
    vec2 g2 = vec2(a0.z, h.z);

    vec3 xdg = vec3(dot(g0, x0), dot(g1, x12.xy), dot(g2, x12.zw));

    vec2 grad = m.x * g0 + m.y * g1 + m.z * g2;
    grad -= w.x * xdg.x * x0 + w.y * xdg.y * x12.xy + w.z * xdg.z * x12.zw;

    return 130.0 * vec4( dot(xdg, m), vec3(-grad.x, 1.0/130.0, -grad.y) );
}

vec4 computeHeightAndNormal(vec2 worldPos) {
    float noiseHeight = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;

    for (int i = 0; i < u_octaves; i++) {
        vec4 noiseAndNormal = snoiseAndNormal(worldPos / (u_scale * frequency));

        float thisNoise = noiseAndNormal.x;

        noiseHeight += amplitude * thisNoise;

        amplitude *= u_persistance;
        frequency *= u_lucunarity;
    }

    float finalHeight = u_terrainHeight * (noiseHeight + 1.0) * 0.5;

    float delta = 0.01;

    vec2 dx = vec2(delta, 0.0);
    vec2 dy = vec2(0.0, delta);

    float heightXPlus = 0.0;
    float heightYPlus = 0.0;

    amplitude = 1.0;
    frequency = 1.0;

    for (int i = 0; i < u_octaves; i++) {
        vec4 noiseXPlus = snoiseAndNormal((worldPos + dx) / (u_scale * frequency));
        vec4 noiseYPlus = snoiseAndNormal((worldPos + dy) / (u_scale * frequency));

        heightXPlus += amplitude * noiseXPlus.x;
        heightYPlus += amplitude * noiseYPlus.x;

        amplitude *= u_persistance;
        frequency *= u_lucunarity;
    }

    float finalHeightXPlus = u_terrainHeight * (heightXPlus + 1.0) * 0.5;
    float finalHeightYPlus = u_terrainHeight * (heightYPlus + 1.0) * 0.5;

    float gradientX = (finalHeightXPlus - finalHeight) / delta;
    float gradientY = (finalHeightYPlus - finalHeight) / delta;

    vec3 finalNormal = normalize(vec3(-gradientX, 1.0, -gradientY));

    return vec4(finalHeight, finalNormal);
}

int computeGridIndex(vec2 localGridPos) {
    int xCellPos = int(floor(localGridPos.x / u_gridCellSize));
    int zCellPos = int(floor(localGridPos.y / u_gridCellSize));

    const int CELLS_PER_ROW = 1024 / u_gridCellSize;

    return xCellPos + CELLS_PER_ROW * zCellPos;
}

void main() {
    if (gl_GlobalInvocationID.x >= u_count) return;

    uint index = u_bufferOffset + gl_GlobalInvocationID.x;
    vec3 currPos = data[index].pos;

    vec2 worldPos = currPos.xz + u_chunkOffset;

    vec4 heightAndNormal = computeHeightAndNormal(worldPos);
    float noiseHeight = heightAndNormal.x;
    float normalizedHeight = noiseHeight / u_terrainHeight;
    vec3 normal = heightAndNormal.yzw;

    data[index].pos = vec3(currPos.x, noiseHeight, currPos.z);
    data[index].normal = normal;

    // Figure out the current local grid cell the position is in
    int cellIndex = computeGridIndex(currPos.xz + u_chunkLocalGridPos);

    // Instancing data generation
    if (normalizedHeight > 0.1) {
        // Grass
           uint instanceIndexGrass = u_modelInstanceOffsets[0] + atomicCounterIncrement(instanceCounters[0]);
           vec3 currInstancePos = vec3(worldPos.x + random(index), noiseHeight, worldPos.y + random(index));
           instances[instanceIndexGrass].pos = currInstancePos;
           instances[instanceIndexGrass].scaling = u_stepSize * clamp(random(index), 0.4, 1.0) * 10.0f;

        if (normalizedHeight > 0.3) {
            bool cellWasEmpty = atomicCompSwap(grid[cellIndex], 0, 1) == 0;

            if (cellWasEmpty) {
                // Random position in cell
                vec2 randXZPos = vec2(random(index) * u_gridCellSize);
                vec2 worldXZdPos = randXZPos + worldPos;

                // Sample again for the correct height
                float height = computeHeightAndNormal(worldXZdPos).x;

                uint instanceIndexTv = u_modelInstanceOffsets[1] + atomicCounterIncrement(instanceCounters[1]);
                vec3 currInstancePos = vec3(worldXZdPos.x, height, worldXZdPos.y);
                instances[instanceIndexTv].pos = currInstancePos;

                // Random tree height
                instances[instanceIndexTv].scaling = clamp(random(index), 0.5, 1.0) * 8.0f;
            }
        }
    }
}